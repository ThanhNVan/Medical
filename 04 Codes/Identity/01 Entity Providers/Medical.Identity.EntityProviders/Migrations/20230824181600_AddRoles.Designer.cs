// <auto-generated />
using System;
using Medical.Identity.EntityProviders;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medical.Identity.EntityProviders.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20230824181600_AddRoles")]
    partial class AddRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Medical.Identity.EntityProviders.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Medical.Identity.EntityProviders.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "54759cb2-0b36-4b39-a1a6-1eb8114a83f6",
                            CreatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(322),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(322),
                            Name = "Human Resource"
                        },
                        new
                        {
                            Id = "d022a2f7-1409-46f0-9f91-722af730dd66",
                            CreatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(325),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(325),
                            Name = "IT"
                        },
                        new
                        {
                            Id = "8973e26f-0c5e-4834-b7ce-eec4f8012bd1",
                            CreatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(327),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(328),
                            Name = "Staff"
                        },
                        new
                        {
                            Id = "f2c45945-28ab-44c8-9163-f0ff3ff29b60",
                            CreatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(330),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(330),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "ab111e2d-1a3c-40bc-b709-09b1c42f557f",
                            CreatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(332),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(332),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = "87896958-50b4-46a6-ba33-535338382147",
                            CreatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(334),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(334),
                            Name = "Sales"
                        },
                        new
                        {
                            Id = "fe89a909-b523-43d2-9b93-179e49f94bcf",
                            CreatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(336),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(336),
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = "423c5327-7f6c-4b39-9f7e-265d9ed53d43",
                            CreatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(345),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(346),
                            Name = "Nurse"
                        },
                        new
                        {
                            Id = "b5084094-63db-4d74-adb7-276e5b59636e",
                            CreatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(347),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2023, 8, 24, 18, 16, 0, 371, DateTimeKind.Utc).AddTicks(348),
                            Name = "Pharmacist"
                        });
                });

            modelBuilder.Entity("Medical.Identity.EntityProviders.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Medical.Identity.EntityProviders.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("RoleId", "UserId")
                        .IsUnique();

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Medical.Identity.EntityProviders.RefreshToken", b =>
                {
                    b.HasOne("Medical.Identity.EntityProviders.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medical.Identity.EntityProviders.UserRole", b =>
                {
                    b.HasOne("Medical.Identity.EntityProviders.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medical.Identity.EntityProviders.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
